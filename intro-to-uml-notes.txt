!!!!!!Take 2 seconds to read the .readme file.!!!!!!!!!!!!!!!!

//////////////////////UML Overview\\\\\\\\\\\\\\\\\\\\\\\\\

1. UML stands for unified modeling language.
    a. UML is language agnostic. The model should be able to be followed by non-developers,
        to see what the user behavior is going to be, what the system does, and see if it
        matches the requirements of the project.
    b. Focuses on the high level behavior of a program.
2. Born in 1996.

////////////////////Stages of Development where UML is Utilized\\\\\\\\\\\\\\\\\\\\\\\\\\\

1. An activity diagram allows us to show what happens at each state of an applications flow.
    a. breaks down flow of application on to small manageable chunks.

2. A Deployment Diagram gives you the ability to take an incredibly high-level look at your code. 
    You can say that I want to have a front end MVC be a Javascript-Angular type of application and I 
    want an API that performs certain tasks and I also want to have a database server along with specific 
    types of elements configured on it.

3. Class Diagrams help you model your entire database to see the relationships between tables and to 
    ensure that you're performing best practices such as database normalization, etc. if you build it prior 
    to building the entire system, you'll find that you're going to have a much more organized approach to 
     modeling your databases.

4. Use Case Diagrams are very high level and allow you to organize each of the processes a specific user 
    of the system is allowed to access.

5. Sequence Diagrams are able to see all of the messages the system is passing internally to ensure that 
    I'm building my methods in an efficient way and I'm following best practices so I can implement something 
    that'll actually work in the system.

6. Package Diagram: After the entire system has been built, there are times where I personally go look at the 
    code base and see how I can organize it be more efficient or I want to decrease the coupling between different 
    modules. I may take out one part of the entire application and turn it into an outside code library. To do 
    that, I can use a Package Diagram to see how I'm organizing the entire code base. That also gives me a very 
    high-level overview for every component in the system and allows me to make sure that I'm conforming to best 
    practices. If I bring a new member to the team, I can show them that Package Diagram and they'll be able to see 
    how the entire system is organized.

//////////////////////////////Introduction to UML Components and Common Elements\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

The six common elements are weâ€™re going to walk through are:

Frames
Classifiers
Stereotypes
Comments
Dependencies
Features (which are also called Properties)

/////////////////////////////Common UML Components: Frames\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

1. What do Frames do?
    a. help encapsulate view Components
    b. provide context.
        :If you are looking at 10 different models, it can be a bit challenging to see what one model represents 
        compared to another.
        : You want to know a couple of things:
            -You want to know exactly what type of system it represents.
            -You want to know what type of diagram it is.

2. How do Frames do this?
    a. Uses headings
    b. provides descriptive notation on what the model is.

3. Why do they do this?
    a. to provide context.

4. Frames Diagram Mapping standard naming:
    a. act = activity
    b. class = class
    c. cmp = component
    d. dep = Deployment
    e. sd = interaction sequence diagram
    f. pkg = Package
    g. stm = state machine
    h. uc = use case

//////////////////////////////////Common UML Components: Classifiers\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

1. What are Classifiers?
    a. They provide a way of identifying/classifying components.
        : Very High level names. 
        : Many people confuse classifiers with class diagrams, but they are not the same.
        : A classifier is simply a way of titling your different UML components and diagrams, it allows you 
            to have one kind of standardized approach.
    b. They are abstract.
        : They are not implemented directly, it's more of a category of Components.

2. What are some components and diagrams that use classifiers?
    a. Class
    b. Interface
    c. Association
    d. Data type
    e. Actor
    f. Use Case
    g. Artifact
    h. component
    i. signal

///////////////////////////////Common UML Components: Comments and Notes\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

1. What are comments (AKA notes)?
    a. They give us the ability to have a descriptive markup.
    b. Comments add clarification for anybody reading the code, however, they are not formalized. You can put pretty 
        much anything you want in a comment.
    c. Comments are in rectangular boxes and they have a dotted line to the element they describe.

2. Syntax: dotted line connecting comment to element

//////////////////////////////Common UML Components: Dependencies\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

1. What is a dependency?
    a. Dependencies are used to denote couplings.
        : Coupling gives us the ability to see how badly one component needs another component.
        : Shows us which components rely on other components in order to work properly.

2. Sytax: 
    a. Dotted line with an open arrow from one element to another.

//////////////////////////////Common UML Components: Features and Properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

1. What are Features/Properties?
    a. They are used to represent attributes of an element.
    b. Strict naming conventions are used to name Features and Properties. This results in less confusion when multiple
        devs are working on the same project.
    c. See features-properties-example image. Below are examples are features/properties in that example.
        : title: 
        : slug:
        : created_at:
        : updated_at:

//////////////////////////////Common UML Components: Stereotypes\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

1. What are Stereotypes?
    a. They are not used in every single type of diagram.
    b. Stereotypes are used to extend meta-classes.
    d. If I'm understanding Jordan correctly, stereo-types provide standard naming conventions for 
        components. See the stereotypes-example image. In that case, <<view>>, <<controller>>, and <<model>>
        are the sterotypes for the Boundary, Control, and Entity components.

2. Syntax:
    a. <<stereotype>>
